version: "3.8"

networks:
  matrix_cloud:
    name: matrix_cloud
    driver: bridge

services:
  nacos:
    image: nacos/nacos-server:${NACOS_VERSION}
    container_name: nacos
    env_file:
      - ./env/nacos-standlone-mysql.env
    volumes:
      - ./log/nacos:/home/nacos/logs
    ports:
      - "8848:8848"
      - "9848:9848"
      - "9555:9555"
    depends_on:
      mysql:
        condition: service_healthy
    restart: always
    networks:
      - matrix_cloud

  mysql:
    container_name: mysql
    build:
      context: .
      dockerfile: ./image/mysql/8/Dockerfile
    image: example/mysql:8.0.30
    env_file:
      - ./env/mysql.env
    volumes:
      - ./mysql:/var/lib/mysql
    ports:
      - "3306:3306"
    healthcheck:
      test: [ "CMD", "mysqladmin" ,"ping", "-h", "localhost" ]
      interval: 5s
      timeout: 10s
      retries: 10
    restart: always
    networks:
      - matrix_cloud

  redis:
    image: redis:${REDIS_VERSION}
    container_name: redis
    ports:
      - "6379:6379"
    environment:
      # 时区上海
      TZ: Asia/Shanghai
    volumes:
      # 配置文件
      - ./redis/conf:/redis/config
      # 数据文件
      - ./redis/data/:/redis/data/
    command: "redis-server /redis/config/redis.conf"
    privileged: true
    restart: always
    networks:
      - matrix_cloud

    # https://github.com/lk0423/sentinel-dashboard
  sentinel:
    image: linking0606/sentinel-dashboard:${SENTINEL_VERSION}
    container_name: sentinel
    environment:
      PARAM: -Dserver.port=8088 -Dcsp.sentinel.dashboard.server=localhost:8088 -Dproject.name=sentinel-dashboard -Ddatasource.provider=nacos -Ddatasource.provider.nacos.server-addr=nacos:8848 -Ddatasource.provider.nacos.username=nacos -Ddatasource.provider.nacos.password=nacos
      TZ: Asia/Shanghai"
    ports:
      - "8088:8088"
    restart: always
    depends_on:
      - nacos
    networks:
      - matrix_cloud

  seata-server:
    image: seataio/seata-server:${SEATA_VERSION}
    container_name: seata-server
    env_file:
      - ./env/seata.env
    environment:
      # 时区上海
      TZ: Asia/Shanghai
    ports:
      - "8091:8091"
      - "7091:7091"
    volumes:
      # 假设我们通过docker cp命令把资源文件拷贝到相对路径`./seata-server/resources`中
      - ./seata:/seata-server/resources
    restart: always
    privileged: true
    depends_on:
      - skywalking-oap
    networks:
      - matrix_cloud
  # 参考https://github.com/deviantony/docker-elk配置
  setup:
    build:
      context: ./elk/setup/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    init: true
    volumes:
      - ./elk/setup:/state:Z
    environment:
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD:-}
      LOGSTASH_INTERNAL_PASSWORD: ${LOGSTASH_INTERNAL_PASSWORD:-}
      KIBANA_SYSTEM_PASSWORD: ${KIBANA_SYSTEM_PASSWORD:-}
    depends_on:
      - elasticsearch
    networks:
      - matrix_cloud

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:${ELASTIC_VERSION}
    container_name: elasticsearch
    volumes:
      - ./elk/elasticsearch/plugins:/usr/share/elasticsearch/plugins
      - ./elk/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro,z
      - ./elk/elasticsearch:/usr/share/elasticsearch/data:z
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      ES_JAVA_OPTS: -Xms512m -Xmx512m
      # Bootstrap password.
      # Used to initialize the keystore during the initial startup of
      # Elasticsearch. Ignored on subsequent runs.
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD:-}
      # Use single node discovery in order to disable production mode and avoid bootstrap checks.
      # see: https://www.elastic.co/guide/en/elasticsearch/reference/7.17/bootstrap-checks.html
      discovery.type: single-node
    networks:
      - matrix_cloud

  logstash:
    image: docker.elastic.co/logstash/logstash:${ELASTIC_VERSION}
    container_name: logstash
    volumes:
      - ./elk/logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro,Z
      - ./elk/logstash/pipeline:/usr/share/logstash/pipeline:ro,Z
    ports:
      - "5044:5044"
      - "50000:50000/tcp"
      - "50000:50000/udp"
      - "9600:9600"
      - "5000:5000"
    environment:
      LS_JAVA_OPTS: -Xms256m -Xmx256m
      LOGSTASH_INTERNAL_PASSWORD: ${LOGSTASH_INTERNAL_PASSWORD:-}
    depends_on:
      - elasticsearch
    networks:
      - matrix_cloud

  kibana:
    image: docker.elastic.co/kibana/kibana:${ELASTIC_VERSION}
    container_name: kibana
    volumes:
      - ./elk/kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml:ro,Z
    ports:
      - "5601:5601"
    environment:
      KIBANA_SYSTEM_PASSWORD: ${KIBANA_SYSTEM_PASSWORD:-}
      #设置系统语言文中文
      I18N_LOCALE: zh-CN
    depends_on:
      - elasticsearch
    networks:
      - matrix_cloud

  skywalking-oap:
    image: apache/skywalking-oap-server:${SKYWALING_VERSION}
    container_name: skywalking-oap
    volumes:
      - ./skywalking:/skywalking/ext-config
      - ./wait-for-it.sh:/skywalking/wait-for-it.sh
    ports:
      - "11800:11800"
      - "12800:12800"
    environment:
      TZ: Asia/Shanghai
    #覆盖容器的entrypoint，等待nacos启动完成
    entrypoint: /skywalking/wait-for-it.sh nacos:8848 -- bash /skywalking/docker-entrypoint.sh
    depends_on:
      - elasticsearch
      - nacos
    networks:
      - matrix_cloud

  skywalking-ui:
    image: apache/skywalking-ui:${SKYWALING_VERSION}
    container_name: skywalking-ui
    depends_on:
      - skywalking-oap
    ports:
      - "8080:8080"
    environment:
      TZ: Asia/Shanghai
      SW_OAP_ADDRESS: http://skywalking-oap:12800
    networks:
      - matrix_cloud